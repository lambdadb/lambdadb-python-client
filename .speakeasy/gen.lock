lockVersion: 2.0.0
id: c85b82f0-3d3c-4545-8562-7e5b5a78f53e
management:
  docChecksum: 3fc92eb931034ff00e6d969aab3aba35
  docVersion: 1.1.1
  speakeasyVersion: 1.574.1
  generationVersion: 2.647.2
  releaseVersion: 0.4.0
  configChecksum: edc86fdc5da882ab162361132e3f3e47
  repoURL: https://github.com/lambdadb/lambdadb-python-client.git
  installationURL: https://github.com/lambdadb/lambdadb-python-client.git
  published: true
features:
  python:
    additionalDependencies: 1.0.0
    constsAndDefaults: 1.0.5
    core: 5.19.3
    defaultEnabledRetries: 0.2.0
    devContainers: 3.0.0
    enumUnions: 0.1.0
    envVarSecurityUsage: 0.3.2
    examples: 3.0.1
    flatRequests: 1.0.1
    flattening: 3.1.1
    globalSecurity: 3.0.3
    globalSecurityCallbacks: 1.0.0
    globalSecurityFlattening: 1.0.0
    globalServerURLs: 3.1.1
    methodArguments: 1.0.2
    responseFormat: 1.0.1
    retries: 3.0.2
    sdkHooks: 1.1.0
    unions: 3.0.4
generatedFiles:
  - .devcontainer/README.md
  - .devcontainer/devcontainer.json
  - .devcontainer/setup.sh
  - .gitattributes
  - .python-version
  - .vscode/settings.json
  - USAGE.md
  - docs/errors/badrequesterror.md
  - docs/errors/internalservererror.md
  - docs/errors/resourcealreadyexistserror.md
  - docs/errors/resourcenotfounderror.md
  - docs/errors/toomanyrequestserror.md
  - docs/errors/unauthenticatederror.md
  - docs/models/analyzer.md
  - docs/models/bulkupsertdocsrequest.md
  - docs/models/bulkupsertdocsrequestbody.md
  - docs/models/collectionresponse.md
  - docs/models/createcollectionrequest.md
  - docs/models/createcollectionresponse.md
  - docs/models/deletecollectionrequest.md
  - docs/models/deletedocsrequest.md
  - docs/models/deletedocsrequestbody.md
  - docs/models/fetchdocsdoc.md
  - docs/models/fetchdocsrequest.md
  - docs/models/fetchdocsrequestbody.md
  - docs/models/fetchdocsresponse.md
  - docs/models/getbulkupsertdocsrequest.md
  - docs/models/getbulkupsertdocsresponse.md
  - docs/models/getbulkupsertdocstype.md
  - docs/models/getcollectionrequest.md
  - docs/models/getcollectionresponse.md
  - docs/models/httpmethod.md
  - docs/models/indexconfigs.md
  - docs/models/indexconfigstext.md
  - docs/models/indexconfigsunion.md
  - docs/models/indexconfigsvector.md
  - docs/models/listcollectionsresponse.md
  - docs/models/messageresponse.md
  - docs/models/querycollectiondoc.md
  - docs/models/querycollectionrequest.md
  - docs/models/querycollectionrequestbody.md
  - docs/models/querycollectionresponse.md
  - docs/models/security.md
  - docs/models/similarity.md
  - docs/models/status.md
  - docs/models/type.md
  - docs/models/typetext.md
  - docs/models/typevector.md
  - docs/models/updatecollectionrequest.md
  - docs/models/updatecollectionrequestbody.md
  - docs/models/updatecollectionresponse.md
  - docs/models/updatedocsrequest.md
  - docs/models/updatedocsrequestbody.md
  - docs/models/upsertdocsrequest.md
  - docs/models/upsertdocsrequestbody.md
  - docs/models/utils/retryconfig.md
  - docs/sdks/collections/README.md
  - docs/sdks/docs/README.md
  - docs/sdks/lambdadb/README.md
  - poetry.toml
  - py.typed
  - pylintrc
  - pyproject.toml
  - scripts/prepare_readme.py
  - scripts/publish.sh
  - src/lambdadb/__init__.py
  - src/lambdadb/_hooks/__init__.py
  - src/lambdadb/_hooks/sdkhooks.py
  - src/lambdadb/_hooks/types.py
  - src/lambdadb/_version.py
  - src/lambdadb/basesdk.py
  - src/lambdadb/collections.py
  - src/lambdadb/docs.py
  - src/lambdadb/errors/__init__.py
  - src/lambdadb/errors/apierror.py
  - src/lambdadb/errors/badrequest_error.py
  - src/lambdadb/errors/internalservererror.py
  - src/lambdadb/errors/lambdadberror.py
  - src/lambdadb/errors/no_response_error.py
  - src/lambdadb/errors/resourcealreadyexists_error.py
  - src/lambdadb/errors/resourcenotfound_error.py
  - src/lambdadb/errors/responsevalidationerror.py
  - src/lambdadb/errors/toomanyrequests_error.py
  - src/lambdadb/errors/unauthenticated_error.py
  - src/lambdadb/httpclient.py
  - src/lambdadb/models/__init__.py
  - src/lambdadb/models/bulkupsertdocsop.py
  - src/lambdadb/models/collectionresponse.py
  - src/lambdadb/models/createcollectionop.py
  - src/lambdadb/models/deletecollectionop.py
  - src/lambdadb/models/deletedocsop.py
  - src/lambdadb/models/fetchdocsop.py
  - src/lambdadb/models/getbulkupsertdocsop.py
  - src/lambdadb/models/getcollectionop.py
  - src/lambdadb/models/indexconfigs_union.py
  - src/lambdadb/models/listcollectionsop.py
  - src/lambdadb/models/messageresponse.py
  - src/lambdadb/models/querycollectionop.py
  - src/lambdadb/models/security.py
  - src/lambdadb/models/status.py
  - src/lambdadb/models/updatecollectionop.py
  - src/lambdadb/models/updatedocsop.py
  - src/lambdadb/models/upsertdocsop.py
  - src/lambdadb/py.typed
  - src/lambdadb/sdk.py
  - src/lambdadb/sdkconfiguration.py
  - src/lambdadb/types/__init__.py
  - src/lambdadb/types/basemodel.py
  - src/lambdadb/utils/__init__.py
  - src/lambdadb/utils/annotations.py
  - src/lambdadb/utils/datetimes.py
  - src/lambdadb/utils/enums.py
  - src/lambdadb/utils/eventstreaming.py
  - src/lambdadb/utils/forms.py
  - src/lambdadb/utils/headers.py
  - src/lambdadb/utils/logger.py
  - src/lambdadb/utils/metadata.py
  - src/lambdadb/utils/queryparams.py
  - src/lambdadb/utils/requestbodies.py
  - src/lambdadb/utils/retries.py
  - src/lambdadb/utils/security.py
  - src/lambdadb/utils/serializers.py
  - src/lambdadb/utils/url.py
  - src/lambdadb/utils/values.py
examples:
  listProjects:
    example:
      responses:
        "200":
          application/json: {"projects": [{"id": "example-project-id", "projectName": "example-project-name", "apiKey": "<API key>", "rateLimit": 10, "status": "ACTIVE"}]}
        "401":
          application/json: {"message": "Authentication failed"}
        "429":
          application/json: {"message": "Too many requests"}
        "500":
          application/json: {"message": "Internal server error"}
  createProject:
    example:
      requestBody:
        application/json: {"projectName": "example-project-name", "rateLimit": 10}
      responses:
        "202":
          application/json: {"id": "example-project-id", "projectName": "example-project-name", "apiKey": "<API key>", "rateLimit": 10, "status": "CREATING"}
        "400":
          application/json: {"message": "Invalid request"}
        "401":
          application/json: {"message": "Authentication failed"}
        "409":
          application/json: {"message": "Resource already exists"}
        "429":
          application/json: {"message": "Too many requests"}
        "500":
          application/json: {"message": "Internal server error"}
  getProject:
    example:
      parameters:
        path:
          projectName: "<value>"
      responses:
        "200":
          application/json: {"id": "example-project-id", "projectName": "example-project-name", "apiKey": "<API key>", "rateLimit": 10, "status": "ACTIVE"}
        "401":
          application/json: {"message": "Authentication failed"}
        "404":
          application/json: {"message": "Resource not found"}
        "429":
          application/json: {"message": "Too many requests"}
        "500":
          application/json: {"message": "Internal server error"}
  deleteProject:
    example:
      parameters:
        path:
          projectName: "<value>"
      responses:
        "202":
          application/json: {"message": "Project example-project-name is queued for deletion"}
        "401":
          application/json: {"message": "Authentication failed"}
        "404":
          application/json: {"message": "Resource not found"}
        "429":
          application/json: {"message": "Too many requests"}
        "500":
          application/json: {"message": "Internal server error"}
  updateProject:
    example:
      parameters:
        path:
          projectName: "<value>"
      requestBody:
        application/json: {"rateLimit": 20}
      responses:
        "200":
          application/json: {"id": "example-project-id", "projectName": "example-project-name", "apiKey": "<API key>", "rateLimit": 20, "status": "ACTIVE"}
        "400":
          application/json: {"message": "Invalid request"}
        "401":
          application/json: {"message": "Authentication failed"}
        "404":
          application/json: {"message": "Resource not found"}
        "429":
          application/json: {"message": "Too many requests"}
        "500":
          application/json: {"message": "Internal server error"}
  listcollections:
    normalCollection:
      parameters:
        path:
          projectName: "<value>"
      responses:
        "200":
          application/json: {"collections": [{"projectName": "example-project-name", "collectionName": "example-collection-name", "indexConfigs": {"example-field1": {"type": "text", "analyzers": ["standard"]}, "example-field2": {"type": "vector", "dimensions": 128, "similarity": "cosine"}}, "numDocs": 10000, "collectionStatus": "ACTIVE"}]}
    clonedCollection:
      parameters:
        path:
          projectName: "<value>"
      responses:
        "200":
          application/json: {"collections": [{"projectName": "example-project-name", "collectionName": "example-collection-name", "indexConfigs": {"example-field1": {"type": "text", "analyzers": ["standard"]}, "example-field2": {"type": "vector", "dimensions": 128, "similarity": "cosine"}}, "numDocs": 10000, "collectionStatus": "ACTIVE"}]}
    example:
      parameters:
        path:
          projectName: "<value>"
      responses:
        "401":
          application/json: {"message": "Authentication failed"}
        "404":
          application/json: {"message": "Resource not found"}
        "429":
          application/json: {"message": "Too many requests"}
        "500":
          application/json: {"message": "Internal server error"}
  createCollection:
    normalCollection:
      parameters:
        path:
          projectName: "<value>"
      requestBody:
        application/json: {"collectionName": "example-collection-name", "indexConfigs": {"example-field1": {"type": "text", "analyzers": ["english"]}, "example-field2": {"type": "vector", "dimensions": 128, "similarity": "cosine"}}}
      responses:
        "202":
          application/json: {"collection": {"projectName": "<value>", "collectionName": "<value>", "indexConfigs": {}, "numDocs": 595485, "collectionStatus": "ACTIVE"}}
        "400":
          application/json: {}
        "401":
          application/json: {}
        "409":
          application/json: {}
        "429":
          application/json: {}
        "500":
          application/json: {}
    cloneCollection:
      parameters:
        path:
          projectName: "<value>"
      requestBody:
        application/json: {"collectionName": "example-collection-name", "sourceProjectName": "example-source-project-name", "sourceCollectionName": "example-source-collection-name", "sourceDatetime": "2023-10-01T12:00:00Z", "sourceProjectApiKey": "example-source-project-api-key"}
      responses:
        "202":
          application/json: {"collection": {"projectName": "<value>", "collectionName": "<value>", "indexConfigs": {}, "numDocs": 595485, "collectionStatus": "ACTIVE"}}
        "400":
          application/json: {}
        "401":
          application/json: {}
        "409":
          application/json: {}
        "429":
          application/json: {}
        "500":
          application/json: {}
    example:
      parameters:
        path:
          projectName: "<value>"
      requestBody:
        application/json: {"collectionName": "<value>"}
      responses:
        "202":
          application/json: {"collection": {"projectName": "<value>", "collectionName": "<value>", "indexConfigs": {}, "numDocs": 595485, "collectionStatus": "ACTIVE"}}
        "400":
          application/json: {"message": "Invalid request"}
        "401":
          application/json: {"message": "Authentication failed"}
        "409":
          application/json: {"message": "Resource already exists"}
        "429":
          application/json: {"message": "Too many requests"}
        "500":
          application/json: {"message": "Internal server error"}
  deleteCollection:
    example:
      parameters:
        path:
          projectName: "<value>"
          collectionName: "<value>"
      responses:
        "202":
          application/json: {"message": "Collection example-collection-name is queued for deletion"}
        "401":
          application/json: {"message": "Authentication failed"}
        "404":
          application/json: {"message": "Resource not found"}
        "429":
          application/json: {"message": "Too many requests"}
        "500":
          application/json: {"message": "Internal server error"}
  getCollection:
    normalCollection:
      parameters:
        path:
          projectName: "<value>"
          collectionName: "<value>"
      responses:
        "200":
          application/json: {"collection": {"projectName": "<value>", "collectionName": "<value>", "indexConfigs": {}, "numDocs": 592208, "collectionStatus": "ACTIVE"}}
    example:
      parameters:
        path:
          projectName: "<value>"
          collectionName: "<value>"
      responses:
        "401":
          application/json: {"message": "Authentication failed"}
        "404":
          application/json: {"message": "Resource not found"}
        "429":
          application/json: {"message": "Too many requests"}
        "500":
          application/json: {"message": "Internal server error"}
  updateCollection:
    example:
      parameters:
        path:
          projectName: "<value>"
          collectionName: "<value>"
      requestBody:
        application/json: {"indexConfigs": {"example-field1": {"type": "text", "analyzers": ["english"]}, "example-field2": {"type": "vector", "dimensions": 128, "similarity": "cosine"}, "example-field3": {"type": "keyword"}}}
      responses:
        "400":
          application/json: {"message": "Invalid request"}
        "401":
          application/json: {"message": "Authentication failed"}
        "404":
          application/json: {"message": "Resource not found"}
        "429":
          application/json: {"message": "Too many requests"}
        "500":
          application/json: {"message": "Internal server error"}
    normalCollection:
      parameters:
        path:
          projectName: "<value>"
          collectionName: "<value>"
      requestBody:
        application/json: {"indexConfigs": {"key": {"type": "keyword"}, "key1": {"type": "keyword"}, "key2": {"type": "vector", "dimensions": 884939, "similarity": "cosine"}}}
      responses:
        "200":
          application/json: {"collection": {"projectName": "<value>", "collectionName": "<value>", "indexConfigs": {"key": {"type": "keyword"}}, "numDocs": 952497, "collectionStatus": "ACTIVE"}}
  queryCollection:
    example:
      parameters:
        path:
          projectName: "<value>"
          collectionName: "<value>"
      requestBody:
        application/json: {"size": 2, "query": {"queryString": {"query": "example-field1:example-value"}}, "consistentRead": false, "includeVectors": false}
      responses:
        "200":
          application/json: {"took": 10, "maxScore": 1, "total": 2, "docs": [{"collection": "example-collection-name", "score": 1, "doc": {"example-field1": "example-value1", "example-field2": [0.1, 0.2, 0.3]}}, {"collection": "example-collection-name", "score": 0.9, "doc": {"example-field1": "example-value2", "example-field2": [0.4, 0.5, 0.6]}}]}
        "400":
          application/json: {"message": "Invalid request"}
        "401":
          application/json: {"message": "Authentication failed"}
        "404":
          application/json: {"message": "Resource not found"}
        "429":
          application/json: {"message": "Too many requests"}
        "500":
          application/json: {"message": "Internal server error"}
  upsertDocs:
    example:
      parameters:
        path:
          projectName: "<value>"
          collectionName: "<value>"
      requestBody:
        application/json: {"docs": [{"example-doc1": {"example-field1": "example-value1", "example-field2": [0.1, 0.2, 0.3]}}, {"example-doc2": {"example-field1": "example-value2", "example-field2": [0.4, 0.5, 0.6]}}]}
      responses:
        "202":
          application/json: {"message": "Upsert request is accepted"}
        "400":
          application/json: {"message": "Invalid request"}
        "401":
          application/json: {"message": "Authentication failed"}
        "404":
          application/json: {"message": "Resource not found"}
        "429":
          application/json: {"message": "Too many requests"}
        "500":
          application/json: {"message": "Internal server error"}
  getBulkUpsertDocs:
    example:
      parameters:
        path:
          projectName: "<value>"
          collectionName: "<value>"
      responses:
        "200":
          application/json: {"url": "<S3 presigned URL>", "type": "application/json", "httpMethod": "PUT", "objectKey": "example-object-key", "sizeLimitBytes": 209715200}
        "401":
          application/json: {"message": "Authentication failed"}
        "404":
          application/json: {"message": "Resource not found"}
        "429":
          application/json: {"message": "Too many requests"}
        "500":
          application/json: {"message": "Internal server error"}
  bulkUpsertDocs:
    example:
      parameters:
        path:
          projectName: "<value>"
          collectionName: "<value>"
      requestBody:
        application/json: {"objectKey": "example-object-key"}
      responses:
        "202":
          application/json: {"message": "Bulk upsert request is accepted"}
        "400":
          application/json: {"message": "Invalid request"}
        "401":
          application/json: {"message": "Authentication failed"}
        "404":
          application/json: {"message": "Resource not found"}
        "429":
          application/json: {"message": "Too many requests"}
        "500":
          application/json: {"message": "Internal server error"}
  deleteDocs:
    deleteByIds:
      parameters:
        path:
          projectName: "<value>"
          collectionName: "<value>"
      requestBody:
        application/json: {"ids": ["example-doc-id-1", "example-doc-id-2"]}
      responses:
        "202":
          application/json: {"message": "<value>"}
        "400":
          application/json: {}
        "401":
          application/json: {}
        "404":
          application/json: {}
        "429":
          application/json: {}
        "500":
          application/json: {}
    deleteByQuery:
      parameters:
        path:
          projectName: "<value>"
          collectionName: "<value>"
      requestBody:
        application/json: {"filter": {"queryString": {"query": "example-field1:example-value"}}}
      responses:
        "202":
          application/json: {"message": "<value>"}
        "400":
          application/json: {}
        "401":
          application/json: {}
        "404":
          application/json: {}
        "429":
          application/json: {}
        "500":
          application/json: {}
    example:
      parameters:
        path:
          projectName: "<value>"
          collectionName: "<value>"
      requestBody:
        application/json: {}
      responses:
        "202":
          application/json: {"message": "Delete request is accepted"}
        "400":
          application/json: {"message": "Invalid request"}
        "401":
          application/json: {"message": "Authentication failed"}
        "404":
          application/json: {"message": "Resource not found"}
        "429":
          application/json: {"message": "Too many requests"}
        "500":
          application/json: {"message": "Internal server error"}
  fetchDocs:
    example:
      parameters:
        path:
          projectName: "<value>"
          collectionName: "<value>"
      requestBody:
        application/json: {"ids": ["example-doc-id-1", "example-doc-id-2"], "consistentRead": false, "includeVectors": false}
      responses:
        "200":
          application/json: {"total": 2, "took": 10, "docs": [{"collection": "example-collection-name", "doc": {"example-field1": "example-value1", "example-field2": [0.1, 0.2, 0.3]}}, {"collection": "example-collection-name", "doc": {"example-field1": "example-value2", "example-field2": [0.4, 0.5, 0.6]}}]}
        "400":
          application/json: {"message": "Invalid request"}
        "401":
          application/json: {"message": "Authentication failed"}
        "404":
          application/json: {"message": "Resource not found"}
        "429":
          application/json: {"message": "Too many requests"}
        "500":
          application/json: {"message": "Internal server error"}
  listCollections:
    normalCollection:
      parameters:
        path:
          projectName: "<value>"
      responses:
        "200":
          application/json: {"collections": [{"projectName": "example-project-name", "collectionName": "example-collection-name", "indexConfigs": {"example-field1": {"type": "text", "analyzers": ["standard"]}, "example-field2": {"type": "vector", "dimensions": 128, "similarity": "cosine"}}, "numDocs": 10000, "collectionStatus": "ACTIVE"}]}
    clonedCollection:
      parameters:
        path:
          projectName: "<value>"
      responses:
        "200":
          application/json: {"collections": [{"projectName": "example-project-name", "collectionName": "example-collection-name", "indexConfigs": {"example-field1": {"type": "text", "analyzers": ["standard"]}, "example-field2": {"type": "vector", "dimensions": 128, "similarity": "cosine"}}, "numDocs": 10000, "collectionStatus": "ACTIVE"}]}
    example:
      parameters:
        path:
          projectName: "<value>"
      responses:
        "401":
          application/json: {"message": "Authentication failed"}
        "404":
          application/json: {"message": "Resource not found"}
        "429":
          application/json: {"message": "Too many requests"}
        "500":
          application/json: {"message": "Internal server error"}
  updateDocs:
    example:
      parameters:
        path:
          projectName: "<value>"
          collectionName: "<value>"
      requestBody:
        application/json: {"docs": [{"example-doc1": {"id": "example-id1", "example-field1": "example-value1", "example-field2": [0.1, 0.2, 0.3]}}, {"example-doc2": {"id": "example-id2", "example-field1": "example-value2", "example-field2": [0.4, 0.5, 0.6]}}]}
      responses:
        "202":
          application/json: {"message": "Update request is accepted"}
        "400":
          application/json: {"message": "Invalid request"}
        "401":
          application/json: {"message": "Authentication failed"}
        "404":
          application/json: {"message": "Resource not found"}
        "429":
          application/json: {"message": "Too many requests"}
        "500":
          application/json: {"message": "Internal server error"}
examplesVersion: 1.0.2
generatedTests: {}
